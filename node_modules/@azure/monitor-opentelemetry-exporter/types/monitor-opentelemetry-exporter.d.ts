import { AggregationTemporality } from '@opentelemetry/sdk-metrics-base';
import { ExportResult } from '@opentelemetry/core';
import { PushMetricExporter } from '@opentelemetry/sdk-metrics-base';
import { ReadableSpan } from '@opentelemetry/sdk-trace-base';
import { ResourceMetrics } from '@opentelemetry/sdk-metrics-base';
import { SpanExporter } from '@opentelemetry/sdk-trace-base';
import { TokenCredential } from '@azure/core-auth';

/**
 * Provides configuration options for AzureMonitorTraceExporter.
 */
export declare interface AzureExporterConfig {
    /**
     * Azure Monitor Connection String, if not provided the exporter will try to use environment variable APPLICATIONINSIGHTS_CONNECTION_STRING
     * Ex: "InstrumentationKey=00000000-0000-0000-0000-000000000000;IngestionEndpoint=https://dc.services.visualstudio.com"
     */
    connectionString?: string;
    /**
     * Azure service API version.
     */
    apiVersion?: ServiceApiVersion;
    /**
     * Azure Active Directory Credential
     */
    aadTokenCredential?: TokenCredential;
}

/**
 * Azure Monitor OpenTelemetry Trace Exporter.
 */
export declare abstract class AzureMonitorBaseExporter {
    /**
     * Instrumentation key to be used for exported envelopes
     */
    protected readonly _instrumentationKey: string;
    private readonly _persister;
    private readonly _sender;
    private _numConsecutiveRedirects;
    private _retryTimer;
    /**
     * Exporter internal configuration
     */
    private readonly _options;
    /**
     * Initializes a new instance of the AzureMonitorBaseExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options?: AzureExporterConfig);
    /**
     * Persist envelopes to disk
     */
    private _persist;
    /**
     * Shutdown exporter
     */
    protected _shutdown(): Promise<void>;
    /**
     * Export envelopes
     */
    protected _exportEnvelopes(envelopes: TelemetryItem[]): Promise<ExportResult>;
    private _sendFirstPersistedFile;
    private _isNetworkError;
}

/**
 * Azure Monitor OpenTelemetry Metric Exporter.
 */
export declare class AzureMonitorMetricExporter extends AzureMonitorBaseExporter implements PushMetricExporter {
    /**
     * Initializes a new instance of the AzureMonitorMetricExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options?: AzureExporterConfig);
    /**
     * Export OpenTelemetry resource metrics.
     * @param metrics - Resource metrics to export.
     * @param resultCallback - Result callback.
     */
    export(metrics: ResourceMetrics, resultCallback: (result: ExportResult) => void): Promise<void>;
    /**
     * Shutdown AzureMonitorMetricExporter.
     */
    shutdown(): Promise<void>;
    /**
     * Select aggregation temporality
     */
    selectAggregationTemporality(): AggregationTemporality;
    /**
     * Force flush
     */
    forceFlush(): Promise<void>;
}

/**
 * Azure Monitor OpenTelemetry Trace Exporter.
 */
export declare class AzureMonitorTraceExporter extends AzureMonitorBaseExporter implements SpanExporter {
    /**
     * Initializes a new instance of the AzureMonitorTraceExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options?: AzureExporterConfig);
    /**
     * Export OpenTelemetry spans.
     * @param spans - Spans to export.
     * @param resultCallback - Result callback.
     */
    export(spans: ReadableSpan[], resultCallback: (result: ExportResult) => void): Promise<void>;
    /**
     * Shutdown AzureMonitorTraceExporter.
     */
    shutdown(): Promise<void>;
}

/** Data struct to contain only C section with custom fields. */
export declare interface MonitorBase {
    /** Name of item (B section) if any. If telemetry data is derived straight from this, this should be null. */
    baseType?: string;
    /** The data payload for the telemetry request */
    baseData?: MonitorDomain;
}

/** The abstract common base of all domains. */
export declare interface MonitorDomain {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Schema version */
    version: number;
}

/**
 * Azure service API version.
 */
export declare enum ServiceApiVersion {
    /**
     * V2 Version
     */
    V2 = "2020-09-15_Preview"
}

/** System variables for a telemetry item. */
export declare interface TelemetryItem {
    /** Envelope version. For internal use only. By assigning this the default, it will not be serialized within the payload unless changed to a value other than #1. */
    version?: number;
    /** Type name of telemetry data item. */
    name: string;
    /** Event date time when telemetry item was created. This is the wall clock time on the client when the event was generated. There is no guarantee that the client's time is accurate. This field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds digits provided are variable (and unspecified). Consumers should handle this, i.e. managed code consumers should not use format 'O' for parsing as it specifies a fixed length. Example: 2009-06-15T13:45:30.0000000Z. */
    time: Date;
    /** Sampling rate used in application. This telemetry item represents 100 / sampleRate actual telemetry items. */
    sampleRate?: number;
    /** Sequence field used to track absolute order of uploaded events. */
    sequence?: string;
    /** The instrumentation key of the Application Insights resource. */
    instrumentationKey?: string;
    /** Key/value collection of context properties. See ContextTagKeys for information on available properties. */
    tags?: {
        [propertyName: string]: string;
    };
    /** Telemetry data item. */
    data?: MonitorBase;
}

export { }
