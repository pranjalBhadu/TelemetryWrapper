{"version":3,"file":"metricUtils.js","sourceRoot":"","sources":["../../../src/utils/metricUtils.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,aAAa,EAA8B,MAAM,iCAAiC,CAAC;AAE5F,OAAO,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAEzD;;;GAGG;AACH,MAAM,UAAU,yBAAyB,CAAC,OAAwB,EAAE,IAAY;IAC9E,IAAI,SAAS,GAAe,EAAE,CAAC;IAC/B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,MAAM,kBAAkB,GAAG,IAAI,CAAC;IAChC,MAAM,IAAI,GAAG,sBAAsB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAEtD,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,EAAE;QAC3C,IAAI,QAAQ,GAAgB;YAC1B,OAAO,EAAE,EAAE;YACX,OAAO,EAAE,CAAC;SACX,CAAC;QACF,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACrC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBACtC,IAAI,eAAe,GAAoB;oBACrC,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,IAAI;oBAC5B,KAAK,EAAE,CAAC;oBACR,aAAa,EAAE,aAAa;iBAC7B,CAAC;gBACF,IAAI,MAAM,CAAC,aAAa,IAAI,aAAa,CAAC,QAAQ,EAAE;oBAClD,eAAe,CAAC,KAAK,GAAG,SAAS,CAAC,KAAe,CAAC;oBAClD,eAAe,CAAC,KAAK,GAAG,CAAC,CAAC;iBAC3B;qBAAM;oBACL,eAAe,CAAC,KAAK,GAAI,SAAS,CAAC,KAAmB,CAAC,GAAG,CAAC;oBAC3D,eAAe,CAAC,KAAK,GAAI,SAAS,CAAC,KAAmB,CAAC,KAAK,CAAC;iBAC9D;gBACD,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,QAAQ,GAAa;YACvB,IAAI,EAAE,sCAAsC;YAC5C,IAAI,EAAE,IAAI;YACV,UAAU,EAAE,GAAG;YACf,kBAAkB,EAAE,kBAAkB;YACtC,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,CAAC;YACV,IAAI,EAAE;gBACJ,QAAQ,EAAE,YAAY;gBACtB,QAAQ,oBACH,QAAQ,CACZ;aACF;SACF,CAAC;QACF,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DataPointType, Histogram, ResourceMetrics } from \"@opentelemetry/sdk-metrics-base\";\nimport { TelemetryItem as Envelope, MetricsData, MetricDataPoint } from \"../generated\";\nimport { createTagsFromResource } from \"./resourceUtils\";\n\n/**\n * Metric to Azure envelope parsing.\n * @internal\n */\nexport function resourceMetricsToEnvelope(metrics: ResourceMetrics, ikey: string): Envelope[] {\n  let envelopes: Envelope[] = [];\n  const time = new Date();\n  const instrumentationKey = ikey;\n  const tags = createTagsFromResource(metrics.resource);\n\n  metrics.scopeMetrics.forEach((scopeMetric) => {\n    let baseData: MetricsData = {\n      metrics: [],\n      version: 2,\n    };\n    scopeMetric.metrics.forEach((metric) => {\n      metric.dataPoints.forEach((dataPoint) => {\n        var metricDataPoint: MetricDataPoint = {\n          name: metric.descriptor.name,\n          value: 0,\n          dataPointType: \"Aggregation\",\n        };\n        if (metric.dataPointType == DataPointType.SINGULAR) {\n          metricDataPoint.value = dataPoint.value as number;\n          metricDataPoint.count = 1;\n        } else {\n          metricDataPoint.value = (dataPoint.value as Histogram).sum;\n          metricDataPoint.count = (dataPoint.value as Histogram).count;\n        }\n        baseData.metrics.push(metricDataPoint);\n      });\n    });\n    let envelope: Envelope = {\n      name: \"Microsoft.ApplicationInsights.Metric\",\n      time: time,\n      sampleRate: 100,\n      instrumentationKey: instrumentationKey,\n      tags: tags,\n      version: 1,\n      data: {\n        baseType: \"MetricData\",\n        baseData: {\n          ...baseData,\n        },\n      },\n    };\n    envelopes.push(envelope);\n  });\n\n  return envelopes;\n}\n"]}