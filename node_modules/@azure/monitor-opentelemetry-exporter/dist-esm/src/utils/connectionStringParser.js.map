{"version":3,"file":"connectionStringParser.js","sourceRoot":"","sources":["../../../src/utils/connectionStringParser.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { diag } from \"@opentelemetry/api\";\nimport { ConnectionString, ConnectionStringKey } from \"../Declarations/Contracts\";\n\nimport * as Constants from \"../Declarations/Constants\";\n\n/**\n * ConnectionString parser.\n * @internal\n */\nexport class ConnectionStringParser {\n  private static readonly FIELDS_SEPARATOR = \";\";\n\n  private static readonly FIELD_KEY_VALUE_SEPARATOR = \"=\";\n\n  public static parse(connectionString?: string): ConnectionString {\n    if (!connectionString) {\n      return {};\n    }\n\n    const kvPairs = connectionString.split(ConnectionStringParser.FIELDS_SEPARATOR);\n    let isValid = true;\n\n    const result: ConnectionString = kvPairs.reduce((fields: ConnectionString, kv: string) => {\n      const kvParts = kv.split(ConnectionStringParser.FIELD_KEY_VALUE_SEPARATOR);\n\n      if (kvParts.length === 2) {\n        // only save fields with valid formats\n        const key = kvParts[0].toLowerCase() as ConnectionStringKey;\n        const value = kvParts[1];\n        return { ...fields, [key]: value };\n      }\n      diag.error(\n        `Connection string key-value pair is invalid: ${kv}`,\n        `Entire connection string will be discarded`,\n        connectionString\n      );\n      isValid = false;\n      return fields;\n    }, {});\n\n    if (isValid && Object.keys(result).length > 0) {\n      // this is a valid connection string, so parse the results\n\n      if (result.endpointsuffix) {\n        // use endpoint suffix where overrides are not provided\n        const locationPrefix = result.location ? `${result.location}.` : \"\";\n        result.ingestionendpoint =\n          result.ingestionendpoint || `https://${locationPrefix}dc.${result.endpointsuffix}`;\n        result.liveendpoint =\n          result.liveendpoint || `https://${locationPrefix}live.${result.endpointsuffix}`;\n      }\n\n      result.ingestionendpoint = result.ingestionendpoint\n        ? ConnectionStringParser.sanitizeUrl(result.ingestionendpoint)\n        : Constants.DEFAULT_BREEZE_ENDPOINT;\n      result.liveendpoint = result.liveendpoint\n        ? ConnectionStringParser.sanitizeUrl(result.liveendpoint)\n        : Constants.DEFAULT_LIVEMETRICS_ENDPOINT;\n      if (result.authorization && result.authorization.toLowerCase() !== \"ikey\") {\n        diag.warn(\n          `Connection String contains an unsupported 'Authorization' value: ${result.authorization!}. Defaulting to 'Authorization=ikey'. Instrumentation Key ${result.instrumentationkey!}`\n        );\n      }\n    } else {\n      diag.error(\n        \"An invalid connection string was passed in. There may be telemetry loss\",\n        connectionString\n      );\n    }\n\n    return result;\n  }\n\n  public static sanitizeUrl(url: string) {\n    let newUrl = url.trim();\n    if (newUrl.indexOf(\"https://\") < 0) {\n      // Try to update http to https\n      newUrl = newUrl.replace(\"http://\", \"https://\");\n    }\n    // Remove final slash if present\n    if (newUrl[newUrl.length - 1] == \"/\") {\n      newUrl = newUrl.slice(0, -1);\n    }\n    return newUrl;\n  }\n}\n"]}