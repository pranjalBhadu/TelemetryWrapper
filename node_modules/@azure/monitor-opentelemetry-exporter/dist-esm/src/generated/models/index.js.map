{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/generated/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAyQH,sEAAsE;AACtE,MAAM,CAAN,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC5B,iDAA2B,CAAA;IAC3B,iDAA2B,CAAA;AAC7B,CAAC,EAHW,kBAAkB,KAAlB,kBAAkB,QAG7B;AAYD,sEAAsE;AACtE,MAAM,CAAN,IAAY,kBAMX;AAND,WAAY,kBAAkB;IAC5B,yCAAmB,CAAA;IACnB,iDAA2B,CAAA;IAC3B,yCAAmB,CAAA;IACnB,qCAAe,CAAA;IACf,2CAAqB,CAAA;AACvB,CAAC,EANW,kBAAkB,KAAlB,kBAAkB,QAM7B;AAeD,uEAAuE;AACvE,MAAM,CAAN,IAAY,mBA6BX;AA7BD,WAAY,mBAAmB;IAC7B,8DAAuC,CAAA;IACvC,kDAA2B,CAAA;IAC3B,0DAAmC,CAAA;IACnC,wDAAiC,CAAA;IACjC,4DAAqC,CAAA;IACrC,gEAAyC,CAAA;IACzC,sDAA+B,CAAA;IAC/B,sDAA+B,CAAA;IAC/B,gEAAyC,CAAA;IACzC,kEAA2C,CAAA;IAC3C,0DAAmC,CAAA;IACnC,wDAAiC,CAAA;IACjC,4DAAqC,CAAA;IACrC,oEAA6C,CAAA;IAC7C,kFAA2D,CAAA;IAC3D,sFAA+D,CAAA;IAC/D,oDAA6B,CAAA;IAC7B,8DAAuC,CAAA;IACvC,4DAAqC,CAAA;IACrC,8CAAuB,CAAA;IACvB,8DAAuC,CAAA;IACvC,oDAA6B,CAAA;IAC7B,0DAAmC,CAAA;IACnC,oEAA6C,CAAA;IAC7C,4DAAqC,CAAA;IACrC,sEAA+C,CAAA;IAC/C,0EAAmD,CAAA;IACnD,kEAA2C,CAAA;AAC7C,CAAC,EA7BW,mBAAmB,KAAnB,mBAAmB,QA6B9B","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** System variables for a telemetry item. */\nexport interface TelemetryItem {\n  /** Envelope version. For internal use only. By assigning this the default, it will not be serialized within the payload unless changed to a value other than #1. */\n  version?: number;\n  /** Type name of telemetry data item. */\n  name: string;\n  /** Event date time when telemetry item was created. This is the wall clock time on the client when the event was generated. There is no guarantee that the client's time is accurate. This field must be formatted in UTC ISO 8601 format, with a trailing 'Z' character, as described publicly on https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal seconds digits provided are variable (and unspecified). Consumers should handle this, i.e. managed code consumers should not use format 'O' for parsing as it specifies a fixed length. Example: 2009-06-15T13:45:30.0000000Z. */\n  time: Date;\n  /** Sampling rate used in application. This telemetry item represents 100 / sampleRate actual telemetry items. */\n  sampleRate?: number;\n  /** Sequence field used to track absolute order of uploaded events. */\n  sequence?: string;\n  /** The instrumentation key of the Application Insights resource. */\n  instrumentationKey?: string;\n  /** Key/value collection of context properties. See ContextTagKeys for information on available properties. */\n  tags?: { [propertyName: string]: string };\n  /** Telemetry data item. */\n  data?: MonitorBase;\n}\n\n/** Data struct to contain only C section with custom fields. */\nexport interface MonitorBase {\n  /** Name of item (B section) if any. If telemetry data is derived straight from this, this should be null. */\n  baseType?: string;\n  /** The data payload for the telemetry request */\n  baseData?: MonitorDomain;\n}\n\n/** The abstract common base of all domains. */\nexport interface MonitorDomain {\n  /** Describes unknown properties. The value of an unknown property can be of \"any\" type. */\n  [property: string]: any;\n  /** Schema version */\n  version: number;\n}\n\n/** Response containing the status of each telemetry item. */\nexport interface TrackResponse {\n  /** The number of items received. */\n  itemsReceived?: number;\n  /** The number of items accepted. */\n  itemsAccepted?: number;\n  /** An array of error detail objects. */\n  errors?: TelemetryErrorDetails[];\n}\n\n/** The error details */\nexport interface TelemetryErrorDetails {\n  /** The index in the original payload of the item. */\n  index?: number;\n  /** The item specific [HTTP Response status code](#Response Status Codes). */\n  statusCode?: number;\n  /** The error message. */\n  message?: string;\n}\n\n/** Metric data single measurement. */\nexport interface MetricDataPoint {\n  /** Namespace of the metric. */\n  namespace?: string;\n  /** Name of the metric. */\n  name: string;\n  /** Metric type. Single measurement or the aggregated value. */\n  dataPointType?: DataPointType;\n  /** Single value for measurement. Sum of individual measurements for the aggregation. */\n  value: number;\n  /** Metric weight of the aggregated metric. Should not be set for a measurement. */\n  count?: number;\n  /** Minimum value of the aggregated metric. Should not be set for a measurement. */\n  min?: number;\n  /** Maximum value of the aggregated metric. Should not be set for a measurement. */\n  max?: number;\n  /** Standard deviation of the aggregated metric. Should not be set for a measurement. */\n  stdDev?: number;\n}\n\n/** Exception details of the exception in a chain. */\nexport interface TelemetryExceptionDetails {\n  /** In case exception is nested (outer exception contains inner one), the id and outerId properties are used to represent the nesting. */\n  id?: number;\n  /** The value of outerId is a reference to an element in ExceptionDetails that represents the outer exception */\n  outerId?: number;\n  /** Exception type name. */\n  typeName?: string;\n  /** Exception message. */\n  message: string;\n  /** Indicates if full exception stack is provided in the exception. The stack may be trimmed, such as in the case of a StackOverflow exception. */\n  hasFullStack?: boolean;\n  /** Text describing the stack. Either stack or parsedStack should have a value. */\n  stack?: string;\n  /** List of stack frames. Either stack or parsedStack should have a value. */\n  parsedStack?: StackFrame[];\n}\n\n/** Stack frame information. */\nexport interface StackFrame {\n  level: number;\n  /** Method name. */\n  method: string;\n  /** Name of the assembly (dll, jar, etc.) containing this function. */\n  assembly?: string;\n  /** File name or URL of the method implementation. */\n  fileName?: string;\n  /** Line number of the code implementation. */\n  line?: number;\n}\n\n/** Instances of AvailabilityData represent the result of executing an availability test. */\nexport type AvailabilityData = MonitorDomain & {\n  /** Identifier of a test run. Use it to correlate steps of test run and telemetry generated by the service. */\n  id: string;\n  /** Name of the test that these availability results represent. */\n  name: string;\n  /** Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. */\n  duration: string;\n  /** Success flag. */\n  success: boolean;\n  /** Name of the location where the test was run from. */\n  runLocation?: string;\n  /** Diagnostic message for the result. */\n  message?: string;\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n  /** Collection of custom measurements. */\n  measurements?: { [propertyName: string]: number };\n};\n\n/** Instances of Event represent structured event records that can be grouped and searched by their properties. Event data item also creates a metric of event count by name. */\nexport type TelemetryEventData = MonitorDomain & {\n  /** Event name. Keep it low cardinality to allow proper grouping and useful metrics. */\n  name: string;\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n  /** Collection of custom measurements. */\n  measurements?: { [propertyName: string]: number };\n};\n\n/** An instance of Exception represents a handled or unhandled exception that occurred during execution of the monitored application. */\nexport type TelemetryExceptionData = MonitorDomain & {\n  /** Exception chain - list of inner exceptions. */\n  exceptions: TelemetryExceptionDetails[];\n  /** Severity level. Mostly used to indicate exception severity level when it is reported by logging library. */\n  severityLevel?: SeverityLevel;\n  /** Identifier of where the exception was thrown in code. Used for exceptions grouping. Typically a combination of exception type and a function from the call stack. */\n  problemId?: string;\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n  /** Collection of custom measurements. */\n  measurements?: { [propertyName: string]: number };\n};\n\n/** Instances of Message represent printf-like trace statements that are text-searched. Log4Net, NLog and other text-based log file entries are translated into instances of this type. The message does not have measurements. */\nexport type MessageData = MonitorDomain & {\n  /** Trace message */\n  message: string;\n  /** Trace severity level. */\n  severityLevel?: SeverityLevel;\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n  /** Collection of custom measurements. */\n  measurements?: { [propertyName: string]: number };\n};\n\n/** An instance of the Metric item is a list of measurements (single data points) and/or aggregations. */\nexport type MetricsData = MonitorDomain & {\n  /** List of metrics. Only one metric in the list is currently supported by Application Insights storage. If multiple data points were sent only the first one will be used. */\n  metrics: MetricDataPoint[];\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n};\n\n/** An instance of PageView represents a generic action on a page like a button click. It is also the base type for PageView. */\nexport type PageViewData = MonitorDomain & {\n  /** Identifier of a page view instance. Used for correlation between page view and other telemetry items. */\n  id: string;\n  /** Event name. Keep it low cardinality to allow proper grouping and useful metrics. */\n  name: string;\n  /** Request URL with all query string parameters */\n  url?: string;\n  /** Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the duration. For a page view with performance information (PageViewPerfData), this is the page load time. Must be less than 1000 days. */\n  duration?: string;\n  /** Fully qualified page URI or URL of the referring page; if unknown, leave blank */\n  referredUri?: string;\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n  /** Collection of custom measurements. */\n  measurements?: { [propertyName: string]: number };\n};\n\n/** An instance of PageViewPerf represents: a page view with no performance data, a page view with performance data, or just the performance data of an earlier page request. */\nexport type PageViewPerfData = MonitorDomain & {\n  /** Identifier of a page view instance. Used for correlation between page view and other telemetry items. */\n  id: string;\n  /** Event name. Keep it low cardinality to allow proper grouping and useful metrics. */\n  name: string;\n  /** Request URL with all query string parameters */\n  url?: string;\n  /** Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view (PageViewData), this is the duration. For a page view with performance information (PageViewPerfData), this is the page load time. Must be less than 1000 days. */\n  duration?: string;\n  /** Performance total in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff */\n  perfTotal?: string;\n  /** Network connection time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff */\n  networkConnect?: string;\n  /** Sent request time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff */\n  sentRequest?: string;\n  /** Received response time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff */\n  receivedResponse?: string;\n  /** DOM processing time in TimeSpan 'G' (general long) format: d:hh:mm:ss.fffffff */\n  domProcessing?: string;\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n  /** Collection of custom measurements. */\n  measurements?: { [propertyName: string]: number };\n};\n\n/** An instance of Remote Dependency represents an interaction of the monitored component with a remote component/service like SQL or an HTTP endpoint. */\nexport type RemoteDependencyData = MonitorDomain & {\n  /** Identifier of a dependency call instance. Used for correlation with the request telemetry item corresponding to this dependency call. */\n  id?: string;\n  /** Name of the command initiated with this dependency call. Low cardinality value. Examples are stored procedure name and URL path template. */\n  name: string;\n  /** Result code of a dependency call. Examples are SQL error code and HTTP status code. */\n  resultCode?: string;\n  /** Command initiated by this dependency call. Examples are SQL statement and HTTP URL with all query parameters. */\n  data?: string;\n  /** Dependency type name. Very low cardinality value for logical grouping of dependencies and interpretation of other fields like commandName and resultCode. Examples are SQL, Azure table, and HTTP. */\n  type?: string;\n  /** Target site of a dependency call. Examples are server name, host address. */\n  target?: string;\n  /** Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. */\n  duration: string;\n  /** Indication of successful or unsuccessful call. */\n  success?: boolean;\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n  /** Collection of custom measurements. */\n  measurements?: { [propertyName: string]: number };\n};\n\n/** An instance of Request represents completion of an external request to the application to do work and contains a summary of that request execution and the results. */\nexport type RequestData = MonitorDomain & {\n  /** Identifier of a request call instance. Used for correlation between request and other telemetry items. */\n  id: string;\n  /** Name of the request. Represents code path taken to process request. Low cardinality value to allow better grouping of requests. For HTTP requests it represents the HTTP method and URL path template like 'GET /values/{id}'. */\n  name?: string;\n  /** Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days. */\n  duration: string;\n  /** Indication of successful or unsuccessful call. */\n  success: boolean;\n  /** Result of a request execution. HTTP status code for HTTP requests. */\n  responseCode: string;\n  /** Source of the request. Examples are the instrumentation key of the caller or the ip address of the caller. */\n  source?: string;\n  /** Request URL with all query string parameters. */\n  url?: string;\n  /** Collection of custom properties. */\n  properties?: { [propertyName: string]: string };\n  /** Collection of custom measurements. */\n  measurements?: { [propertyName: string]: number };\n};\n\n/** Known values of {@link DataPointType} that the service accepts. */\nexport enum KnownDataPointType {\n  Measurement = \"Measurement\",\n  Aggregation = \"Aggregation\"\n}\n\n/**\n * Defines values for DataPointType. \\\n * {@link KnownDataPointType} can be used interchangeably with DataPointType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Measurement** \\\n * **Aggregation**\n */\nexport type DataPointType = string;\n\n/** Known values of {@link SeverityLevel} that the service accepts. */\nexport enum KnownSeverityLevel {\n  Verbose = \"Verbose\",\n  Information = \"Information\",\n  Warning = \"Warning\",\n  Error = \"Error\",\n  Critical = \"Critical\"\n}\n\n/**\n * Defines values for SeverityLevel. \\\n * {@link KnownSeverityLevel} can be used interchangeably with SeverityLevel,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Verbose** \\\n * **Information** \\\n * **Warning** \\\n * **Error** \\\n * **Critical**\n */\nexport type SeverityLevel = string;\n\n/** Known values of {@link ContextTagKeys} that the service accepts. */\nexport enum KnownContextTagKeys {\n  AiApplicationVer = \"ai.application.ver\",\n  AiDeviceId = \"ai.device.id\",\n  AiDeviceLocale = \"ai.device.locale\",\n  AiDeviceModel = \"ai.device.model\",\n  AiDeviceOemName = \"ai.device.oemName\",\n  AiDeviceOsVersion = \"ai.device.osVersion\",\n  AiDeviceType = \"ai.device.type\",\n  AiLocationIp = \"ai.location.ip\",\n  AiLocationCountry = \"ai.location.country\",\n  AiLocationProvince = \"ai.location.province\",\n  AiLocationCity = \"ai.location.city\",\n  AiOperationId = \"ai.operation.id\",\n  AiOperationName = \"ai.operation.name\",\n  AiOperationParentId = \"ai.operation.parentId\",\n  AiOperationSyntheticSource = \"ai.operation.syntheticSource\",\n  AiOperationCorrelationVector = \"ai.operation.correlationVector\",\n  AiSessionId = \"ai.session.id\",\n  AiSessionIsFirst = \"ai.session.isFirst\",\n  AiUserAccountId = \"ai.user.accountId\",\n  AiUserId = \"ai.user.id\",\n  AiUserAuthUserId = \"ai.user.authUserId\",\n  AiCloudRole = \"ai.cloud.role\",\n  AiCloudRoleVer = \"ai.cloud.roleVer\",\n  AiCloudRoleInstance = \"ai.cloud.roleInstance\",\n  AiCloudLocation = \"ai.cloud.location\",\n  AiInternalSdkVersion = \"ai.internal.sdkVersion\",\n  AiInternalAgentVersion = \"ai.internal.agentVersion\",\n  AiInternalNodeName = \"ai.internal.nodeName\"\n}\n\n/**\n * Defines values for ContextTagKeys. \\\n * {@link KnownContextTagKeys} can be used interchangeably with ContextTagKeys,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **ai.application.ver** \\\n * **ai.device.id** \\\n * **ai.device.locale** \\\n * **ai.device.model** \\\n * **ai.device.oemName** \\\n * **ai.device.osVersion** \\\n * **ai.device.type** \\\n * **ai.location.ip** \\\n * **ai.location.country** \\\n * **ai.location.province** \\\n * **ai.location.city** \\\n * **ai.operation.id** \\\n * **ai.operation.name** \\\n * **ai.operation.parentId** \\\n * **ai.operation.syntheticSource** \\\n * **ai.operation.correlationVector** \\\n * **ai.session.id** \\\n * **ai.session.isFirst** \\\n * **ai.user.accountId** \\\n * **ai.user.id** \\\n * **ai.user.authUserId** \\\n * **ai.cloud.role** \\\n * **ai.cloud.roleVer** \\\n * **ai.cloud.roleInstance** \\\n * **ai.cloud.location** \\\n * **ai.internal.sdkVersion** \\\n * **ai.internal.agentVersion** \\\n * **ai.internal.nodeName**\n */\nexport type ContextTagKeys = string;\n\n/** Optional parameters. */\nexport interface TrackOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the track operation. */\nexport type TrackOperationResponse = TrackResponse;\n\n/** Optional parameters. */\nexport interface ApplicationInsightsClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** Breeze endpoint: https://dc.services.visualstudio.com */\n  host?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}