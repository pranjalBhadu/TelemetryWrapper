{"version":3,"file":"trace.js","sourceRoot":"","sources":["../../../src/export/trace.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAG1C,OAAO,EAAE,wBAAwB,EAAE,MAAM,QAAQ,CAAC;AAGlD,OAAO,EAAE,sBAAsB,EAAE,qBAAqB,EAAE,MAAM,oBAAoB,CAAC;AAEnF;;GAEG;AACH,MAAM,OAAO,yBAA0B,SAAQ,wBAAwB;IACrE;;;OAGG;IACH,YAAY,UAA+B,EAAE;QAC3C,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;IACjE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CACV,KAAqB,EACrB,cAA8C;QAE9C,IAAI,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,MAAM,sCAAsC,CAAC,CAAC;QAE3E,IAAI,SAAS,GAAe,EAAE,CAAC;QAC/B,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACrB,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACvE,IAAI,kBAAkB,GAAG,qBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;YAC/E,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,SAAS,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,CAAC;aACvC;QACH,CAAC,CAAC,CAAC;QACH,cAAc,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { diag } from \"@opentelemetry/api\";\nimport { ExportResult } from \"@opentelemetry/core\";\nimport { ReadableSpan, SpanExporter } from \"@opentelemetry/sdk-trace-base\";\nimport { AzureMonitorBaseExporter } from \"./base\";\nimport { AzureExporterConfig } from \"../config\";\nimport { TelemetryItem as Envelope } from \"../generated\";\nimport { readableSpanToEnvelope, spanEventsToEnvelopes } from \"../utils/spanUtils\";\n\n/**\n * Azure Monitor OpenTelemetry Trace Exporter.\n */\nexport class AzureMonitorTraceExporter extends AzureMonitorBaseExporter implements SpanExporter {\n  /**\n   * Initializes a new instance of the AzureMonitorTraceExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n  constructor(options: AzureExporterConfig = {}) {\n    super(options);\n    diag.debug(\"AzureMonitorTraceExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry spans.\n   * @param spans - Spans to export.\n   * @param resultCallback - Result callback.\n   */\n  async export(\n    spans: ReadableSpan[],\n    resultCallback: (result: ExportResult) => void\n  ): Promise<void> {\n    diag.info(`Exporting ${spans.length} span(s). Converting to envelopes...`);\n\n    let envelopes: Envelope[] = [];\n    spans.forEach((span) => {\n      envelopes.push(readableSpanToEnvelope(span, this._instrumentationKey));\n      let spanEventEnvelopes = spanEventsToEnvelopes(span, this._instrumentationKey);\n      if (spanEventEnvelopes.length > 0) {\n        envelopes.push(...spanEventEnvelopes);\n      }\n    });\n    resultCallback(await this._exportEnvelopes(envelopes));\n  }\n\n  /**\n   * Shutdown AzureMonitorTraceExporter.\n   */\n  async shutdown(): Promise<void> {\n    diag.info(\"Azure Monitor Trace Exporter shutting down\");\n    return this._shutdown();\n  }\n}\n"]}