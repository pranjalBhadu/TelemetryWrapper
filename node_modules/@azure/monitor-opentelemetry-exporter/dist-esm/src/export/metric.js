// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { diag } from "@opentelemetry/api";
import { AggregationTemporality, } from "@opentelemetry/sdk-metrics-base";
import { AzureMonitorBaseExporter } from "./base";
import { resourceMetricsToEnvelope } from "../utils/metricUtils";
/**
 * Azure Monitor OpenTelemetry Metric Exporter.
 */
export class AzureMonitorMetricExporter extends AzureMonitorBaseExporter {
    /**
     * Initializes a new instance of the AzureMonitorMetricExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options = {}) {
        super(options);
        diag.debug("AzureMonitorMetricExporter was successfully setup");
    }
    /**
     * Export OpenTelemetry resource metrics.
     * @param metrics - Resource metrics to export.
     * @param resultCallback - Result callback.
     */
    async export(metrics, resultCallback) {
        diag.info(`Exporting ${metrics.scopeMetrics.length} metrics(s). Converting to envelopes...`);
        let envelopes = resourceMetricsToEnvelope(metrics, this._instrumentationKey);
        resultCallback(await this._exportEnvelopes(envelopes));
    }
    /**
     * Shutdown AzureMonitorMetricExporter.
     */
    async shutdown() {
        diag.info("Azure Monitor Trace Exporter shutting down");
        return this._shutdown();
    }
    /**
     * Select aggregation temporality
     */
    selectAggregationTemporality() {
        return AggregationTemporality.CUMULATIVE;
    }
    /**
     * Force flush
     */
    async forceFlush() {
        // TODO: https://github.com/open-telemetry/opentelemetry-js/issues/3060
        throw new Error("Method not implemented.");
    }
}
//# sourceMappingURL=metric.js.map