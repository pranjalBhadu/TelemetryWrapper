// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { diag } from "@opentelemetry/api";
import { ExportResultCode } from "@opentelemetry/core";
import { ConnectionStringParser } from "../utils/connectionStringParser";
import { HttpSender, FileSystemPersist } from "../platform";
import { DEFAULT_EXPORTER_CONFIG, } from "../config";
import { isRetriable } from "../utils/breezeUtils";
import { ENV_CONNECTION_STRING } from "../Declarations/Constants";
/**
 * Azure Monitor OpenTelemetry Trace Exporter.
 */
export class AzureMonitorBaseExporter {
    /**
     * Initializes a new instance of the AzureMonitorBaseExporter class.
     * @param AzureExporterConfig - Exporter configuration.
     */
    constructor(options = {}) {
        var _a, _b, _c, _d;
        this._numConsecutiveRedirects = 0;
        const connectionString = options.connectionString || process.env[ENV_CONNECTION_STRING];
        this._options = Object.assign({}, DEFAULT_EXPORTER_CONFIG);
        this._options.apiVersion = (_a = options.apiVersion) !== null && _a !== void 0 ? _a : this._options.apiVersion;
        this._options.aadTokenCredential = options.aadTokenCredential;
        if (connectionString) {
            const parsedConnectionString = ConnectionStringParser.parse(connectionString);
            this._options.instrumentationKey =
                (_b = parsedConnectionString.instrumentationkey) !== null && _b !== void 0 ? _b : this._options.instrumentationKey;
            this._options.endpointUrl =
                (_d = (_c = parsedConnectionString.ingestionendpoint) === null || _c === void 0 ? void 0 : _c.trim()) !== null && _d !== void 0 ? _d : this._options.endpointUrl;
        }
        // Instrumentation key is required
        if (!this._options.instrumentationKey) {
            const message = "No instrumentation key or connection string was provided to the Azure Monitor Exporter";
            diag.error(message);
            throw new Error(message);
        }
        this._instrumentationKey = this._options.instrumentationKey;
        this._sender = new HttpSender(this._options);
        this._persister = new FileSystemPersist(this._options);
        this._retryTimer = null;
        diag.debug("AzureMonitorTraceExporter was successfully setup");
    }
    /**
     * Persist envelopes to disk
     */
    async _persist(envelopes) {
        try {
            const success = await this._persister.push(envelopes);
            return success
                ? { code: ExportResultCode.SUCCESS }
                : {
                    code: ExportResultCode.FAILED,
                    error: new Error("Failed to persist envelope in disk."),
                };
        }
        catch (ex) {
            return { code: ExportResultCode.FAILED, error: ex };
        }
    }
    /**
     * Shutdown exporter
     */
    async _shutdown() {
        return this._sender.shutdown();
    }
    /**
     * Export envelopes
     */
    async _exportEnvelopes(envelopes) {
        diag.info(`Exporting ${envelopes.length} envelope(s)`);
        try {
            const { result, statusCode } = await this._sender.send(envelopes);
            this._numConsecutiveRedirects = 0;
            if (statusCode === 200) {
                // Success -- @todo: start retry timer
                if (!this._retryTimer) {
                    this._retryTimer = setTimeout(() => {
                        this._retryTimer = null;
                        this._sendFirstPersistedFile();
                    }, this._options.batchSendRetryIntervalMs);
                    this._retryTimer.unref();
                }
                return { code: ExportResultCode.SUCCESS };
            }
            else if (statusCode && isRetriable(statusCode)) {
                // Failed -- persist failed data
                if (result) {
                    diag.info(result);
                    const breezeResponse = JSON.parse(result);
                    const filteredEnvelopes = [];
                    if (breezeResponse.errors) {
                        breezeResponse.errors.forEach((error) => {
                            if (error.statusCode && isRetriable(error.statusCode)) {
                                filteredEnvelopes.push(envelopes[error.index]);
                            }
                        });
                    }
                    if (filteredEnvelopes.length > 0) {
                        // calls resultCallback(ExportResult) based on result of persister.push
                        return await this._persist(filteredEnvelopes);
                    }
                    // Failed -- not retriable
                    return {
                        code: ExportResultCode.FAILED,
                    };
                }
                else {
                    // calls resultCallback(ExportResult) based on result of persister.push
                    return await this._persist(envelopes);
                }
            }
            else {
                // Failed -- not retriable
                return {
                    code: ExportResultCode.FAILED,
                };
            }
        }
        catch (error) {
            const restError = error;
            if (restError.statusCode &&
                (restError.statusCode === 307 || // Temporary redirect
                    restError.statusCode === 308)) {
                // Permanent redirect
                this._numConsecutiveRedirects++;
                // To prevent circular redirects
                if (this._numConsecutiveRedirects < 10) {
                    if (restError.response && restError.response.headers) {
                        const location = restError.response.headers.get("location");
                        if (location) {
                            // Update sender URL
                            this._sender.handlePermanentRedirect(location);
                            // Send to redirect endpoint as HTTPs library doesn't handle redirect automatically
                            return this._exportEnvelopes(envelopes);
                        }
                    }
                }
                else {
                    return { code: ExportResultCode.FAILED, error: new Error("Circular redirect") };
                }
            }
            else if (restError.statusCode && isRetriable(restError.statusCode)) {
                return await this._persist(envelopes);
            }
            if (this._isNetworkError(restError)) {
                diag.error("Retrying due to transient client side error. Error message:", restError.message);
                return await this._persist(envelopes);
            }
            diag.error("Envelopes could not be exported and are not retriable. Error message:", restError.message);
            return { code: ExportResultCode.FAILED, error: restError };
        }
    }
    async _sendFirstPersistedFile() {
        try {
            const envelopes = (await this._persister.shift());
            if (envelopes) {
                await this._sender.send(envelopes);
            }
        }
        catch (err) {
            diag.warn(`Failed to fetch persisted file`, err);
        }
    }
    _isNetworkError(error) {
        if (error && error.code && error.code === "REQUEST_SEND_ERROR") {
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=base.js.map