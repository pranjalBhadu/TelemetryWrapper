{"version":3,"file":"metric.js","sourceRoot":"","sources":["../../../src/export/metric.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAC1C,OAAO,EACL,sBAAsB,GAGvB,MAAM,iCAAiC,CAAC;AAEzC,OAAO,EAAE,wBAAwB,EAAE,MAAM,QAAQ,CAAC;AAGlD,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AAEjE;;GAEG;AACH,MAAM,OAAO,0BACX,SAAQ,wBAAwB;IAGhC;;;OAGG;IACH,YAAY,UAA+B,EAAE;QAC3C,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;IAClE,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM,CACV,OAAwB,EACxB,cAA8C;QAE9C,IAAI,CAAC,IAAI,CAAC,aAAa,OAAO,CAAC,YAAY,CAAC,MAAM,yCAAyC,CAAC,CAAC;QAE7F,IAAI,SAAS,GAAe,yBAAyB,CAAC,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACzF,cAAc,CAAC,MAAM,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;IACzD,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,QAAQ;QACnB,IAAI,CAAC,IAAI,CAAC,4CAA4C,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC,SAAS,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,4BAA4B;QACjC,OAAO,sBAAsB,CAAC,UAAU,CAAC;IAC3C,CAAC;IAED;;OAEG;IACI,KAAK,CAAC,UAAU;QACrB,uEAAuE;QACvE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { diag } from \"@opentelemetry/api\";\nimport {\n  AggregationTemporality,\n  PushMetricExporter,\n  ResourceMetrics,\n} from \"@opentelemetry/sdk-metrics-base\";\nimport { ExportResult } from \"@opentelemetry/core\";\nimport { AzureMonitorBaseExporter } from \"./base\";\nimport { AzureExporterConfig } from \"../config\";\nimport { TelemetryItem as Envelope } from \"../generated\";\nimport { resourceMetricsToEnvelope } from \"../utils/metricUtils\";\n\n/**\n * Azure Monitor OpenTelemetry Metric Exporter.\n */\nexport class AzureMonitorMetricExporter\n  extends AzureMonitorBaseExporter\n  implements PushMetricExporter\n{\n  /**\n   * Initializes a new instance of the AzureMonitorMetricExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n  constructor(options: AzureExporterConfig = {}) {\n    super(options);\n    diag.debug(\"AzureMonitorMetricExporter was successfully setup\");\n  }\n\n  /**\n   * Export OpenTelemetry resource metrics.\n   * @param metrics - Resource metrics to export.\n   * @param resultCallback - Result callback.\n   */\n  async export(\n    metrics: ResourceMetrics,\n    resultCallback: (result: ExportResult) => void\n  ): Promise<void> {\n    diag.info(`Exporting ${metrics.scopeMetrics.length} metrics(s). Converting to envelopes...`);\n\n    let envelopes: Envelope[] = resourceMetricsToEnvelope(metrics, this._instrumentationKey);\n    resultCallback(await this._exportEnvelopes(envelopes));\n  }\n\n  /**\n   * Shutdown AzureMonitorMetricExporter.\n   */\n  public async shutdown(): Promise<void> {\n    diag.info(\"Azure Monitor Trace Exporter shutting down\");\n    return this._shutdown();\n  }\n\n  /**\n   * Select aggregation temporality\n   */\n  public selectAggregationTemporality() {\n    return AggregationTemporality.CUMULATIVE;\n  }\n\n  /**\n   * Force flush\n   */\n  public async forceFlush() {\n    // TODO: https://github.com/open-telemetry/opentelemetry-js/issues/3060\n    throw new Error(\"Method not implemented.\");\n  }\n}\n"]}