{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/export/base.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { diag } from \"@opentelemetry/api\";\nimport { ExportResult, ExportResultCode } from \"@opentelemetry/core\";\nimport { RestError } from \"@azure/core-rest-pipeline\";\nimport { ConnectionStringParser } from \"../utils/connectionStringParser\";\nimport { HttpSender, FileSystemPersist } from \"../platform\";\nimport {\n  DEFAULT_EXPORTER_CONFIG,\n  AzureExporterConfig,\n  AzureExporterInternalConfig,\n} from \"../config\";\nimport { PersistentStorage, Sender } from \"../types\";\nimport { isRetriable, BreezeResponse } from \"../utils/breezeUtils\";\nimport { ENV_CONNECTION_STRING } from \"../Declarations/Constants\";\nimport { TelemetryItem as Envelope } from \"../generated\";\n\n/**\n * Azure Monitor OpenTelemetry Trace Exporter.\n */\nexport abstract class AzureMonitorBaseExporter {\n  /**\n   * Instrumentation key to be used for exported envelopes\n   */\n  protected readonly _instrumentationKey: string;\n  private readonly _persister: PersistentStorage;\n  private readonly _sender: Sender;\n  private _numConsecutiveRedirects: number;\n  private _retryTimer: NodeJS.Timer | null;\n  /**\n   * Exporter internal configuration\n   */\n  private readonly _options: AzureExporterInternalConfig;\n\n  /**\n   * Initializes a new instance of the AzureMonitorBaseExporter class.\n   * @param AzureExporterConfig - Exporter configuration.\n   */\n  constructor(options: AzureExporterConfig = {}) {\n    this._numConsecutiveRedirects = 0;\n    const connectionString = options.connectionString || process.env[ENV_CONNECTION_STRING];\n    this._options = {\n      ...DEFAULT_EXPORTER_CONFIG,\n    };\n    this._options.apiVersion = options.apiVersion ?? this._options.apiVersion;\n    this._options.aadTokenCredential = options.aadTokenCredential;\n\n    if (connectionString) {\n      const parsedConnectionString = ConnectionStringParser.parse(connectionString);\n      this._options.instrumentationKey =\n        parsedConnectionString.instrumentationkey ?? this._options.instrumentationKey;\n      this._options.endpointUrl =\n        parsedConnectionString.ingestionendpoint?.trim() ?? this._options.endpointUrl;\n    }\n    // Instrumentation key is required\n    if (!this._options.instrumentationKey) {\n      const message =\n        \"No instrumentation key or connection string was provided to the Azure Monitor Exporter\";\n      diag.error(message);\n      throw new Error(message);\n    }\n\n    this._instrumentationKey = this._options.instrumentationKey;\n    this._sender = new HttpSender(this._options);\n    this._persister = new FileSystemPersist(this._options);\n    this._retryTimer = null;\n    diag.debug(\"AzureMonitorTraceExporter was successfully setup\");\n  }\n\n  /**\n   * Persist envelopes to disk\n   */\n  private async _persist(envelopes: unknown[]): Promise<ExportResult> {\n    try {\n      const success = await this._persister.push(envelopes);\n      return success\n        ? { code: ExportResultCode.SUCCESS }\n        : {\n            code: ExportResultCode.FAILED,\n            error: new Error(\"Failed to persist envelope in disk.\"),\n          };\n    } catch (ex: any) {\n      return { code: ExportResultCode.FAILED, error: ex };\n    }\n  }\n\n  /**\n   * Shutdown exporter\n   */\n  protected async _shutdown(): Promise<void> {\n    return this._sender.shutdown();\n  }\n\n  /**\n   * Export envelopes\n   */\n  protected async _exportEnvelopes(envelopes: Envelope[]): Promise<ExportResult> {\n    diag.info(`Exporting ${envelopes.length} envelope(s)`);\n\n    try {\n      const { result, statusCode } = await this._sender.send(envelopes);\n      this._numConsecutiveRedirects = 0;\n      if (statusCode === 200) {\n        // Success -- @todo: start retry timer\n        if (!this._retryTimer) {\n          this._retryTimer = setTimeout(() => {\n            this._retryTimer = null;\n            this._sendFirstPersistedFile();\n          }, this._options.batchSendRetryIntervalMs);\n          this._retryTimer.unref();\n        }\n        return { code: ExportResultCode.SUCCESS };\n      } else if (statusCode && isRetriable(statusCode)) {\n        // Failed -- persist failed data\n        if (result) {\n          diag.info(result);\n          const breezeResponse = JSON.parse(result) as BreezeResponse;\n          const filteredEnvelopes: Envelope[] = [];\n          if (breezeResponse.errors) {\n            breezeResponse.errors.forEach((error) => {\n              if (error.statusCode && isRetriable(error.statusCode)) {\n                filteredEnvelopes.push(envelopes[error.index]);\n              }\n            });\n          }\n          if (filteredEnvelopes.length > 0) {\n            // calls resultCallback(ExportResult) based on result of persister.push\n            return await this._persist(filteredEnvelopes);\n          }\n          // Failed -- not retriable\n          return {\n            code: ExportResultCode.FAILED,\n          };\n        } else {\n          // calls resultCallback(ExportResult) based on result of persister.push\n          return await this._persist(envelopes);\n        }\n      } else {\n        // Failed -- not retriable\n        return {\n          code: ExportResultCode.FAILED,\n        };\n      }\n    } catch (error: any) {\n      const restError = error as RestError;\n      if (\n        restError.statusCode &&\n        (restError.statusCode === 307 || // Temporary redirect\n          restError.statusCode === 308)\n      ) {\n        // Permanent redirect\n        this._numConsecutiveRedirects++;\n        // To prevent circular redirects\n        if (this._numConsecutiveRedirects < 10) {\n          if (restError.response && restError.response.headers) {\n            const location = restError.response.headers.get(\"location\");\n            if (location) {\n              // Update sender URL\n              this._sender.handlePermanentRedirect(location);\n              // Send to redirect endpoint as HTTPs library doesn't handle redirect automatically\n              return this._exportEnvelopes(envelopes);\n            }\n          }\n        } else {\n          return { code: ExportResultCode.FAILED, error: new Error(\"Circular redirect\") };\n        }\n      } else if (restError.statusCode && isRetriable(restError.statusCode)) {\n        return await this._persist(envelopes);\n      }\n      if (this._isNetworkError(restError)) {\n        diag.error(\n          \"Retrying due to transient client side error. Error message:\",\n          restError.message\n        );\n        return await this._persist(envelopes);\n      }\n\n      diag.error(\n        \"Envelopes could not be exported and are not retriable. Error message:\",\n        restError.message\n      );\n      return { code: ExportResultCode.FAILED, error: restError };\n    }\n  }\n\n  private async _sendFirstPersistedFile(): Promise<void> {\n    try {\n      const envelopes = (await this._persister.shift()) as Envelope[] | null;\n      if (envelopes) {\n        await this._sender.send(envelopes);\n      }\n    } catch (err: any) {\n      diag.warn(`Failed to fetch persisted file`, err);\n    }\n  }\n\n  private _isNetworkError(error: RestError): boolean {\n    if (error && error.code && error.code === \"REQUEST_SEND_ERROR\") {\n      return true;\n    }\n    return false;\n  }\n}\n"]}