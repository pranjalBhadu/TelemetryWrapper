// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import url from "url";
import { diag } from "@opentelemetry/api";
import { bearerTokenAuthenticationPolicy, redirectPolicyName } from "@azure/core-rest-pipeline";
import { ApplicationInsightsClient, } from "../../generated";
const applicationInsightsResource = "https://monitor.azure.com//.default";
/**
 * Exporter HTTP sender class
 * @internal
 */
export class HttpSender {
    constructor(_exporterOptions) {
        this._exporterOptions = _exporterOptions;
        // Build endpoint using provided configuration or default values
        this._appInsightsClientOptions = {
            host: this._exporterOptions.endpointUrl,
        };
        this._appInsightsClient = new ApplicationInsightsClient(Object.assign({}, this._appInsightsClientOptions));
        // Handle redirects in HTTP Sender
        this._appInsightsClient.pipeline.removePolicy({ name: redirectPolicyName });
        if (this._exporterOptions.aadTokenCredential) {
            let scopes = [applicationInsightsResource];
            this._appInsightsClient.pipeline.addPolicy(bearerTokenAuthenticationPolicy({
                credential: this._exporterOptions.aadTokenCredential,
                scopes: scopes,
            }));
        }
    }
    /**
     * Send Azure envelopes
     * @internal
     */
    async send(envelopes) {
        var _a;
        let options = {};
        try {
            let response;
            function onResponse(rawResponse, flatResponse) {
                response = rawResponse;
                if (options.onResponse) {
                    options.onResponse(rawResponse, flatResponse);
                }
            }
            await this._appInsightsClient.track(envelopes, Object.assign(Object.assign({}, options), { onResponse }));
            return { statusCode: response === null || response === void 0 ? void 0 : response.status, result: (_a = response === null || response === void 0 ? void 0 : response.bodyAsText) !== null && _a !== void 0 ? _a : "" };
        }
        catch (e) {
            throw e;
        }
    }
    /**
     * Shutdown sender
     * @internal
     */
    async shutdown() {
        diag.info("HttpSender shutting down");
    }
    handlePermanentRedirect(location) {
        if (location) {
            const locUrl = new url.URL(location);
            if (locUrl && locUrl.host) {
                this._appInsightsClient.host = "https://" + locUrl.host;
            }
        }
    }
}
//# sourceMappingURL=httpSender.js.map