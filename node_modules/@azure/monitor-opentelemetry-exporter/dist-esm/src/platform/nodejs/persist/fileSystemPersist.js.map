{"version":3,"file":"fileSystemPersist.js","sourceRoot":"","sources":["../../../../../src/platform/nodejs/persist/fileSystemPersist.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as fs from \"fs\";\nimport * as os from \"os\";\nimport * as path from \"path\";\nimport { diag } from \"@opentelemetry/api\";\nimport { PersistentStorage } from \"../../../types\";\nimport { DEFAULT_EXPORTER_CONFIG, AzureExporterInternalConfig } from \"../../../config\";\nimport { FileAccessControl } from \"./fileAccessControl\";\nimport { confirmDirExists, getShallowDirectorySize } from \"./fileSystemHelpers\";\nimport { promisify } from \"util\";\n\nconst statAsync = promisify(fs.stat);\nconst readdirAsync = promisify(fs.readdir);\nconst readFileAsync = promisify(fs.readFile);\nconst unlinkAsync = promisify(fs.unlink);\nconst writeFileAsync = promisify(fs.writeFile);\n\n/**\n * File system persist class.\n * @internal\n */\nexport class FileSystemPersist implements PersistentStorage {\n  static TEMPDIR_PREFIX = \"ot-azure-exporter-\";\n\n  static FILENAME_SUFFIX = \".ai.json\";\n\n  fileRetemptionPeriod = 7 * 24 * 60 * 60 * 1000; // 7 days\n  cleanupTimeOut = 60 * 60 * 1000; // 1 hour\n  maxBytesOnDisk: number = 50_000_000; // ~50MB\n\n  private _enabled: boolean;\n  private _tempDirectory: string = \"\";\n  private _fileCleanupTimer: NodeJS.Timer | null = null;\n\n  private readonly _options: AzureExporterInternalConfig;\n\n  constructor(options: Partial<AzureExporterInternalConfig> = {}) {\n    this._options = { ...DEFAULT_EXPORTER_CONFIG, ...options };\n    this._enabled = true;\n    FileAccessControl.checkFileProtection();\n\n    if (!FileAccessControl.OS_PROVIDES_FILE_PROTECTION) {\n      this._enabled = false;\n      diag.error(\n        \"Sufficient file protection capabilities were not detected. Files will not be persisted\"\n      );\n    }\n\n    if (!this._options.instrumentationKey) {\n      this._enabled = false;\n      diag.error(\n        `No instrumentation key was provided to FileSystemPersister. Files will not be persisted`\n      );\n    }\n    if (this._enabled) {\n      this._tempDirectory = path.join(\n        os.tmpdir(),\n        FileSystemPersist.TEMPDIR_PREFIX + this._options.instrumentationKey\n      );\n      // Starts file cleanup task\n      if (!this._fileCleanupTimer) {\n        this._fileCleanupTimer = setTimeout(() => {\n          this._fileCleanupTask();\n        }, this.cleanupTimeOut);\n        this._fileCleanupTimer.unref();\n      }\n    }\n  }\n\n  push(value: unknown[]): Promise<boolean> {\n    if (this._enabled) {\n      diag.debug(\"Pushing value to persistent storage\", value.toString());\n      return this._storeToDisk(JSON.stringify(value));\n    }\n    return new Promise((resolve) => {\n      resolve(false);\n    });\n  }\n\n  async shift(): Promise<unknown> {\n    if (this._enabled) {\n      diag.debug(\"Searching for filesystem persisted files\");\n      try {\n        const buffer = await this._getFirstFileOnDisk();\n        if (buffer) {\n          return JSON.parse(buffer.toString(\"utf8\"));\n        }\n      } catch (e: any) {\n        diag.debug(\"Failed to read persisted file\", e);\n      }\n      return null;\n    }\n    return new Promise((resolve) => {\n      resolve(null);\n    });\n  }\n\n  /**\n   * Check for temp telemetry files\n   * reads the first file if exist, deletes it and tries to send its load\n   */\n  private async _getFirstFileOnDisk(): Promise<Buffer | null> {\n    try {\n      const stats = await statAsync(this._tempDirectory);\n      if (stats.isDirectory()) {\n        const origFiles = await readdirAsync(this._tempDirectory);\n        const files = origFiles.filter((f) =>\n          path.basename(f).includes(FileSystemPersist.FILENAME_SUFFIX)\n        );\n        if (files.length === 0) {\n          return null;\n        } else {\n          const firstFile = files[0];\n          const filePath = path.join(this._tempDirectory, firstFile);\n          const payload = await readFileAsync(filePath);\n          // delete the file first to prevent double sending\n          await unlinkAsync(filePath);\n          return payload;\n        }\n      }\n      return null;\n    } catch (e: any) {\n      if (e.code === \"ENOENT\") {\n        // File does not exist -- return null instead of throwing\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  private async _storeToDisk(payload: string): Promise<boolean> {\n    try {\n      await confirmDirExists(this._tempDirectory);\n    } catch (error: any) {\n      diag.warn(`Error while checking/creating directory: `, error && error.message);\n      return false;\n    }\n\n    try {\n      const size = await getShallowDirectorySize(this._tempDirectory);\n      if (size > this.maxBytesOnDisk) {\n        diag.warn(\n          `Not saving data due to max size limit being met. Directory size in bytes is: ${size}`\n        );\n        return false;\n      }\n    } catch (error: any) {\n      diag.warn(`Error while checking size of persistence directory: `, error && error.message);\n      return false;\n    }\n\n    const fileName = `${new Date().getTime()}${FileSystemPersist.FILENAME_SUFFIX}`;\n    const fileFullPath = path.join(this._tempDirectory, fileName);\n\n    // Mode 600 is w/r for creator and no read access for others\n    diag.info(`saving data to disk at: ${fileFullPath}`);\n    try {\n      await writeFileAsync(fileFullPath, payload, { mode: 0o600 });\n    } catch (writeError: any) {\n      diag.warn(`Error writing file to persistent file storage`, writeError);\n      return false;\n    }\n    return true;\n  }\n\n  private async _fileCleanupTask(): Promise<boolean> {\n    try {\n      const stats = await statAsync(this._tempDirectory);\n      if (stats.isDirectory()) {\n        const origFiles = await readdirAsync(this._tempDirectory);\n        const files = origFiles.filter((f) =>\n          path.basename(f).includes(FileSystemPersist.FILENAME_SUFFIX)\n        );\n        if (files.length === 0) {\n          return false;\n        } else {\n          files.forEach(async (file) => {\n            // Check expiration\n            const fileCreationDate: Date = new Date(\n              parseInt(file.split(FileSystemPersist.FILENAME_SUFFIX)[0])\n            );\n            const expired = new Date(+new Date() - this.fileRetemptionPeriod) > fileCreationDate;\n            if (expired) {\n              const filePath = path.join(this._tempDirectory, file);\n              await unlinkAsync(filePath);\n            }\n          });\n          return true;\n        }\n      }\n      return false;\n    } catch (error: any) {\n      diag.info(`Failed cleanup of persistent file storage expired files`, error);\n      return false;\n    }\n  }\n}\n"]}