{"version":3,"file":"httpSender.js","sourceRoot":"","sources":["../../../../src/platform/nodejs/httpSender.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAClC,OAAO,GAAG,MAAM,KAAK,CAAC;AACtB,OAAO,EAAE,IAAI,EAAE,MAAM,oBAAoB,CAAC;AAE1C,OAAO,EAAE,+BAA+B,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAEhG,OAAO,EAEL,yBAAyB,GAG1B,MAAM,iBAAiB,CAAC;AAGzB,MAAM,2BAA2B,GAAG,qCAAqC,CAAC;AAE1E;;;GAGG;AACH,MAAM,OAAO,UAAU;IAIrB,YAAoB,gBAA6C;QAA7C,qBAAgB,GAAhB,gBAAgB,CAA6B;QAC/D,gEAAgE;QAChE,IAAI,CAAC,yBAAyB,GAAG;YAC/B,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,WAAW;SACxC,CAAC;QACF,IAAI,CAAC,kBAAkB,GAAG,IAAI,yBAAyB,mBAClD,IAAI,CAAC,yBAAyB,EACjC,CAAC;QACH,kCAAkC;QAClC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAE5E,IAAI,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,EAAE;YAC5C,IAAI,MAAM,GAAa,CAAC,2BAA2B,CAAC,CAAC;YACrD,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,SAAS,CACxC,+BAA+B,CAAC;gBAC9B,UAAU,EAAE,IAAI,CAAC,gBAAgB,CAAC,kBAAkB;gBACpD,MAAM,EAAE,MAAM;aACf,CAAC,CACH,CAAC;SACH;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,IAAI,CAAC,SAAqB;;QAC9B,IAAI,OAAO,GAAwB,EAAE,CAAC;QACtC,IAAI;YACF,IAAI,QAA2C,CAAC;YAChD,SAAS,UAAU,CAAC,WAAkC,EAAE,YAAqB;gBAC3E,QAAQ,GAAG,WAAW,CAAC;gBACvB,IAAI,OAAO,CAAC,UAAU,EAAE;oBACtB,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;iBAC/C;YACH,CAAC;YACD,MAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,SAAS,kCACxC,OAAO,KACV,UAAU,IACV,CAAC;YAEH,OAAO,EAAE,UAAU,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,EAAE,MAAM,EAAE,MAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,UAAU,mCAAI,EAAE,EAAE,CAAC;SAC7E;QAAC,OAAO,CAAM,EAAE;YACf,MAAM,CAAC,CAAC;SACT;IACH,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;IACxC,CAAC;IAED,uBAAuB,CAAC,QAA4B;QAClD,IAAI,QAAQ,EAAE;YACZ,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;gBACzB,IAAI,CAAC,kBAAkB,CAAC,IAAI,GAAG,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC;aACzD;SACF;IACH,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport url from \"url\";\nimport { diag } from \"@opentelemetry/api\";\nimport { FullOperationResponse } from \"@azure/core-client\";\nimport { bearerTokenAuthenticationPolicy, redirectPolicyName } from \"@azure/core-rest-pipeline\";\nimport { Sender, SenderResult } from \"../../types\";\nimport {\n  TelemetryItem as Envelope,\n  ApplicationInsightsClient,\n  ApplicationInsightsClientOptionalParams,\n  TrackOptionalParams,\n} from \"../../generated\";\nimport { AzureExporterInternalConfig } from \"../../config\";\n\nconst applicationInsightsResource = \"https://monitor.azure.com//.default\";\n\n/**\n * Exporter HTTP sender class\n * @internal\n */\nexport class HttpSender implements Sender {\n  private readonly _appInsightsClient: ApplicationInsightsClient;\n  private _appInsightsClientOptions: ApplicationInsightsClientOptionalParams;\n\n  constructor(private _exporterOptions: AzureExporterInternalConfig) {\n    // Build endpoint using provided configuration or default values\n    this._appInsightsClientOptions = {\n      host: this._exporterOptions.endpointUrl,\n    };\n    this._appInsightsClient = new ApplicationInsightsClient({\n      ...this._appInsightsClientOptions,\n    });\n    // Handle redirects in HTTP Sender\n    this._appInsightsClient.pipeline.removePolicy({ name: redirectPolicyName });\n\n    if (this._exporterOptions.aadTokenCredential) {\n      let scopes: string[] = [applicationInsightsResource];\n      this._appInsightsClient.pipeline.addPolicy(\n        bearerTokenAuthenticationPolicy({\n          credential: this._exporterOptions.aadTokenCredential,\n          scopes: scopes,\n        })\n      );\n    }\n  }\n\n  /**\n   * Send Azure envelopes\n   * @internal\n   */\n  async send(envelopes: Envelope[]): Promise<SenderResult> {\n    let options: TrackOptionalParams = {};\n    try {\n      let response: FullOperationResponse | undefined;\n      function onResponse(rawResponse: FullOperationResponse, flatResponse: unknown): void {\n        response = rawResponse;\n        if (options.onResponse) {\n          options.onResponse(rawResponse, flatResponse);\n        }\n      }\n      await this._appInsightsClient.track(envelopes, {\n        ...options,\n        onResponse,\n      });\n\n      return { statusCode: response?.status, result: response?.bodyAsText ?? \"\" };\n    } catch (e: any) {\n      throw e;\n    }\n  }\n\n  /**\n   * Shutdown sender\n   * @internal\n   */\n  async shutdown(): Promise<void> {\n    diag.info(\"HttpSender shutting down\");\n  }\n\n  handlePermanentRedirect(location: string | undefined) {\n    if (location) {\n      const locUrl = new url.URL(location);\n      if (locUrl && locUrl.host) {\n        this._appInsightsClient.host = \"https://\" + locUrl.host;\n      }\n    }\n  }\n}\n"]}